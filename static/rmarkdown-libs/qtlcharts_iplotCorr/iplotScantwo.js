// Generated by CoffeeScript 1.10.0
var add_symmetric_lod, iplotScantwo, lod_for_heatmap;

iplotScantwo = function(widgetdiv, scantwo_data, pheno_and_geno, chartOpts) {
  var add_cell_tooltips, altrectcolor, axispos, boxcolor, boxwidth, chrGap, chrlinecolor, chrlinewidth, cicolors, color, div, eff_hpos, eff_vpos, form, g_eff, g_heatmap, g_scans, gn, hbot, heatmap_height, heatmap_width, height, hright, i, left, leftsel, leftvalue, linecolor, linewidth, margin, mycichart, mydotchart, mylod2dheatmap, mylodchart, n, ncat, nullcolor, nyticks_ci, nyticks_lod, nyticks_pxg, oneAtTop, options, plot_effects, plot_scan, pointsize, pointstroke, rectcolor, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref28, ref29, ref3, ref30, ref31, ref32, ref33, ref4, ref5, ref6, ref7, ref8, ref9, right, rightsel, rightvalue, scans_hpos, scans_vpos, segstrokewidth, segwidth, submit, svg, titlepos, w, wbot, widgetdivid, width, wright, x, xlab_lod, ylab_eff, ylab_lod, yticks_ci, yticks_lod, yticks_pxg, zthresh;
  height = (ref = chartOpts != null ? chartOpts.height : void 0) != null ? ref : 1200;
  width = (ref1 = chartOpts != null ? chartOpts.width : void 0) != null ? ref1 : 1100;
  chrGap = (ref2 = chartOpts != null ? chartOpts.chrGap : void 0) != null ? ref2 : 2;
  wright = (ref3 = chartOpts != null ? chartOpts.wright : void 0) != null ? ref3 : width / 2;
  hbot = (ref4 = chartOpts != null ? chartOpts.hbot : void 0) != null ? ref4 : height / 5;
  margin = (ref5 = chartOpts != null ? chartOpts.margin : void 0) != null ? ref5 : {
    left: 60,
    top: 50,
    right: 10,
    bottom: 40,
    inner: 5
  };
  axispos = (ref6 = chartOpts != null ? chartOpts.axispos : void 0) != null ? ref6 : {
    xtitle: 25,
    ytitle: 30,
    xlabel: 5,
    ylabel: 5
  };
  titlepos = (ref7 = chartOpts != null ? chartOpts.titlepos : void 0) != null ? ref7 : 20;
  rectcolor = (ref8 = chartOpts != null ? chartOpts.rectcolor : void 0) != null ? ref8 : "#e6e6e6";
  altrectcolor = (ref9 = chartOpts != null ? chartOpts.altrectcolor : void 0) != null ? ref9 : "#c8c8c8";
  chrlinecolor = (ref10 = chartOpts != null ? chartOpts.chrlinecolor : void 0) != null ? ref10 : "";
  chrlinewidth = (ref11 = chartOpts != null ? chartOpts.chrlinewidth : void 0) != null ? ref11 : 2;
  nullcolor = (ref12 = chartOpts != null ? chartOpts.nullcolor : void 0) != null ? ref12 : "#e6e6e6";
  boxcolor = (ref13 = chartOpts != null ? chartOpts.boxcolor : void 0) != null ? ref13 : "black";
  boxwidth = (ref14 = chartOpts != null ? chartOpts.boxwidth : void 0) != null ? ref14 : 2;
  linecolor = (ref15 = chartOpts != null ? chartOpts.linecolor : void 0) != null ? ref15 : "slateblue";
  linewidth = (ref16 = chartOpts != null ? chartOpts.linewidth : void 0) != null ? ref16 : 2;
  pointsize = (ref17 = chartOpts != null ? chartOpts.pointsize : void 0) != null ? ref17 : 2;
  pointstroke = (ref18 = chartOpts != null ? chartOpts.pointstroke : void 0) != null ? ref18 : "black";
  cicolors = (ref19 = chartOpts != null ? chartOpts.cicolors : void 0) != null ? ref19 : null;
  segwidth = (ref20 = chartOpts != null ? chartOpts.segwidth : void 0) != null ? ref20 : 0.4;
  segstrokewidth = (ref21 = chartOpts != null ? chartOpts.segstrokewidth : void 0) != null ? ref21 : 3;
  color = (ref22 = chartOpts != null ? chartOpts.color : void 0) != null ? ref22 : "slateblue";
  oneAtTop = (ref23 = chartOpts != null ? chartOpts.oneAtTop : void 0) != null ? ref23 : false;
  zthresh = (ref24 = chartOpts != null ? chartOpts.zthresh : void 0) != null ? ref24 : 0;
  ylab_eff = (ref25 = chartOpts != null ? chartOpts.ylab_eff : void 0) != null ? ref25 : "Phenotype";
  xlab_lod = (ref26 = chartOpts != null ? chartOpts.xlab_lod : void 0) != null ? ref26 : "Chromosome";
  ylab_lod = (ref27 = chartOpts != null ? chartOpts.ylab_lod : void 0) != null ? ref27 : "LOD score";
  nyticks_lod = (ref28 = chartOpts != null ? chartOpts.nyticks_lod : void 0) != null ? ref28 : 5;
  yticks_lod = (ref29 = chartOpts != null ? chartOpts.yticks_lod : void 0) != null ? ref29 : null;
  nyticks_ci = (ref30 = chartOpts != null ? chartOpts.nyticks_ci : void 0) != null ? ref30 : 5;
  yticks_ci = (ref31 = chartOpts != null ? chartOpts.yticks_ci : void 0) != null ? ref31 : null;
  nyticks_pxg = (ref32 = chartOpts != null ? chartOpts.nyticks_pxg : void 0) != null ? ref32 : 5;
  yticks_pxg = (ref33 = chartOpts != null ? chartOpts.yticks_pxg : void 0) != null ? ref33 : null;
  div = d3.select(widgetdiv);
  widgetdivid = div.attr("id");
  svg = div.select("svg");
  scantwo_data.chrnames = d3panels.forceAsArray(scantwo_data.chrnames);
  scantwo_data.nmar = d3panels.forceAsArray(scantwo_data.nmar);
  w = d3.min([height - hbot * 2, width - wright]);
  heatmap_width = w;
  heatmap_height = w;
  hright = heatmap_height / 2;
  width = heatmap_width + wright;
  height = heatmap_height + hbot * 2;
  wbot = width / 2;
  leftvalue = "int";
  rightvalue = "fv1";
  if (pheno_and_geno != null) {
    gn = pheno_and_geno.genonames;
    ncat = d3.max((function() {
      var results;
      results = [];
      for (x in gn) {
        results.push(gn[x].length);
      }
      return results;
    })());
    if (cicolors != null) {
      cicolors = d3panels.expand2vector(cicolors, ncat);
      n = cicolors.length;
      if (n < ncat) {
        d3panels.displayError("length(cicolors) (" + n + ") < maximum no. genotypes (" + ncat + ")");
        cicolors = (function() {
          var k, ref34, results;
          results = [];
          for (i = k = 0, ref34 = ncat; 0 <= ref34 ? k < ref34 : k > ref34; i = 0 <= ref34 ? ++k : --k) {
            results.push(cicolors[i % n]);
          }
          return results;
        })();
      }
    } else {
      cicolors = d3panels.selectGroupColors(ncat, "dark");
    }
  }
  options = ["full", "fv1", "int", "add", "av1"];
  form = div.insert("div", ":first-child").attr("id", "form").attr("class", "qtlcharts").attr("height", "24px");
  left = form.append("div").text(oneAtTop ? "bottom-left: " : "top-left: ").style("float", "left").style("margin-left", "50px");
  leftsel = left.append("select").attr("id", "leftselect_" + widgetdivid).attr("name", "left");
  leftsel.selectAll("empty").data(options).enter().append("option").attr("value", function(d) {
    return d;
  }).text(function(d) {
    return d;
  }).attr("selected", function(d) {
    if (d === leftvalue) {
      return "selected";
    }
    return null;
  });
  right = form.append("div").text(oneAtTop ? "top-right: " : "bottom-right: ").style("float", "left").style("margin-left", "50px");
  rightsel = right.append("select").attr("id", "rightselect_" + widgetdivid).attr("name", "right");
  rightsel.selectAll("empty").data(options).enter().append("option").attr("value", function(d) {
    return d;
  }).text(function(d) {
    return d;
  }).attr("selected", function(d) {
    if (d === rightvalue) {
      return "selected";
    }
    return null;
  });
  submit = form.append("div").style("float", "left").style("margin-left", "50px").append("button").attr("name", "refresh").text("Refresh").on("click", function() {
    leftsel = document.getElementById("leftselect_" + widgetdivid);
    leftvalue = leftsel.options[leftsel.selectedIndex].value;
    rightsel = document.getElementById("rightselect_" + widgetdivid);
    rightvalue = rightsel.options[rightsel.selectedIndex].value;
    scantwo_data.lod = lod_for_heatmap(scantwo_data, leftvalue, rightvalue);
    mylod2dheatmap.remove();
    mylod2dheatmap(div.select("g#chrheatmap"), scantwo_data);
    return add_cell_tooltips();
  });
  scantwo_data = add_symmetric_lod(scantwo_data);
  scantwo_data.lod = lod_for_heatmap(scantwo_data, leftvalue, rightvalue);
  mylod2dheatmap = d3panels.lod2dheatmap({
    height: heatmap_height,
    width: heatmap_width,
    margin: margin,
    axispos: axispos,
    chrGap: chrGap,
    chrlinecolor: chrlinecolor,
    chrlinewidth: chrlinewidth,
    xlab: xlab_lod,
    ylab: ylab_lod,
    rectcolor: "white",
    nullcolor: nullcolor,
    boxcolor: boxcolor,
    boxwidth: boxwidth,
    colors: ["white", color],
    zlim: [0, scantwo_data.max.full],
    zthresh: zthresh,
    oneAtTop: oneAtTop,
    tipclass: widgetdivid
  });
  g_heatmap = svg.append("g").attr("id", "chrheatmap");
  mylod2dheatmap(g_heatmap, scantwo_data);
  add_cell_tooltips = function() {
    mylod2dheatmap.celltip().html(function(d) {
      var leftlod, mari, marj, rightlod;
      mari = scantwo_data.marker[d.xindex];
      marj = scantwo_data.marker[d.yindex];
      if (+d.xindex > +d.yindex) {
        leftlod = d3.format(".1f")(scantwo_data[leftvalue][d.xindex][d.yindex]);
        rightlod = d3.format(".1f")(scantwo_data[rightvalue][d.yindex][d.xindex]);
        return "(" + marj + " " + mari + ") " + rightvalue + " = " + rightlod + ", " + leftvalue + " = " + leftlod;
      } else if (+d.yindex > +d.xindex) {
        leftlod = d3.format(".1f")(scantwo_data[leftvalue][d.yindex][d.xindex]);
        rightlod = d3.format(".1f")(scantwo_data[rightvalue][d.xindex][d.yindex]);
        return "(" + marj + " " + mari + ") " + leftvalue + " = " + leftlod + ", " + rightvalue + " = " + rightlod;
      } else {
        return mari;
      }
    });
    return mylod2dheatmap.cells().on("click", function(d) {
      var mari, marj;
      mari = scantwo_data.marker[d.xindex];
      marj = scantwo_data.marker[d.yindex];
      if (d.xindex === d.yindex) {
        return null;
      }
      plot_scan(d.xindex, 0, 0, leftvalue);
      plot_scan(d.xindex, 1, 0, rightvalue);
      plot_scan(d.yindex, 0, 1, leftvalue);
      plot_scan(d.yindex, 1, 1, rightvalue);
      if (pheno_and_geno != null) {
        return plot_effects(d.xindex, d.yindex);
      }
    });
  };
  add_cell_tooltips();
  mylodchart = [[null, null], [null, null]];
  scans_hpos = [0, wbot];
  scans_vpos = [heatmap_height, heatmap_height + hbot];
  mydotchart = null;
  mycichart = null;
  eff_hpos = [heatmap_width, heatmap_width];
  eff_vpos = [0, heatmap_height / 2];
  g_scans = [[null, null], [null, null]];
  plot_scan = function(markerindex, panelrow, panelcol, lod) {
    var data;
    data = {
      chrname: scantwo_data.chrnames,
      chr: scantwo_data.chr,
      pos: scantwo_data.pos,
      lod: (function() {
        var k, len, ref34, results;
        ref34 = scantwo_data[lod][markerindex];
        results = [];
        for (k = 0, len = ref34.length; k < len; k++) {
          x = ref34[k];
          results.push(x);
        }
        return results;
      })(),
      marker: scantwo_data.marker
    };
    if (mylodchart[panelrow][panelcol] != null) {
      mylodchart[panelrow][panelcol].remove();
    }
    mylodchart[panelrow][panelcol] = d3panels.lodchart({
      height: hbot,
      width: wbot,
      margin: margin,
      axispos: axispos,
      ylim: [0.0, scantwo_data.max[lod] * 1.05],
      nyticks: nyticks_lod,
      yticks: yticks_lod,
      rectcolor: rectcolor,
      altrectcolor: altrectcolor,
      chrlinecolor: chrlinecolor,
      chrlinewidth: chrlinewidth,
      boxcolor: boxcolor,
      boxwidth: boxwidth,
      linewidth: linewidth,
      linecolor: linecolor,
      pointsize: 0,
      pointcolor: "",
      pointstroke: "",
      lodvarname: "lod",
      chrGap: chrGap,
      xlab: xlab_lod,
      ylab: ylab_lod,
      title: data.marker[markerindex] + " : " + lod,
      titlepos: titlepos,
      tipclass: widgetdivid
    });
    if (g_scans[panelrow][panelcol] == null) {
      g_scans[panelrow][panelcol] = svg.append("g").attr("id", "scan_" + (panelrow + 1) + "_" + (panelcol + 1)).attr("transform", "translate(" + scans_hpos[panelcol] + ", " + scans_vpos[panelrow] + ")");
    }
    return mylodchart[panelrow][panelcol](g_scans[panelrow][panelcol], data);
  };
  g_eff = [null, null];
  return plot_effects = function(markerindex1, markerindex2) {
    var chr1, chr2, ci_data, cicolors_expanded, cis, effcharts, g, g1, g2, gn1, gn2, gnames1, gnames2, j, k, l, m, mar1, mar2, ng1, ng2, o, p, pxg_data, q, ref34, ref35, ref36, ref37, results, results1, results2;
    mar1 = scantwo_data.marker[markerindex1];
    mar2 = scantwo_data.marker[markerindex2];
    g1 = pheno_and_geno.geno[mar1];
    g2 = pheno_and_geno.geno[mar2];
    chr1 = pheno_and_geno.chr[mar1];
    chr2 = pheno_and_geno.chr[mar2];
    gnames1 = pheno_and_geno.genonames[chr1];
    gnames2 = pheno_and_geno.genonames[chr2];
    ng1 = gnames1.length;
    ng2 = gnames2.length;
    g = (function() {
      var results;
      results = [];
      for (i in g1) {
        results.push(g1[i] + (g2[i] - 1) * ng1);
      }
      return results;
    })();
    gn1 = [];
    gn2 = [];
    cicolors_expanded = [];
    for (i = k = 0, ref34 = ng2; 0 <= ref34 ? k < ref34 : k > ref34; i = 0 <= ref34 ? ++k : --k) {
      for (j = l = 0, ref35 = ng1; 0 <= ref35 ? l < ref35 : l > ref35; j = 0 <= ref35 ? ++l : --l) {
        gn1.push(gnames1[j]);
        gn2.push(gnames2[i]);
        cicolors_expanded.push(cicolors[i]);
      }
    }
    if (mydotchart != null) {
      mydotchart.remove();
    }
    if (mycichart != null) {
      mycichart.remove();
    }
    pxg_data = {
      x: g,
      y: pheno_and_geno.pheno,
      indID: pheno_and_geno.indID
    };
    mydotchart = d3panels.dotchart({
      height: hright,
      width: wright,
      margin: margin,
      axispos: axispos,
      rectcolor: rectcolor,
      boxcolor: boxcolor,
      boxwidth: boxwidth,
      pointsize: pointsize,
      pointstroke: pointstroke,
      xcategories: (function() {
        results = [];
        for (var m = 1, ref36 = gn1.length; 1 <= ref36 ? m <= ref36 : m >= ref36; 1 <= ref36 ? m++ : m--){ results.push(m); }
        return results;
      }).apply(this),
      xcatlabels: gn1,
      xlab: "",
      ylab: ylab_eff,
      nyticks: nyticks_pxg,
      yticks: yticks_pxg,
      dataByInd: false,
      title: mar1 + " : " + mar2,
      titlepos: titlepos,
      tipclass: widgetdivid
    });
    if (g_eff[1] == null) {
      g_eff[1] = svg.append("g").attr("id", "eff_1").attr("transform", "translate(" + eff_hpos[1] + ", " + eff_vpos[1] + ")");
    }
    mydotchart(g_eff[1], pxg_data);
    mydotchart.points().attr("fill", function(d, i) {
      return cicolors_expanded[g[i] - 1];
    });
    cis = d3panels.ci_by_group(g, pheno_and_geno.pheno, 2);
    ci_data = {
      mean: (function() {
        var o, ref37, ref38, ref39, results1;
        results1 = [];
        for (x = o = 1, ref37 = gn1.length; 1 <= ref37 ? o <= ref37 : o >= ref37; x = 1 <= ref37 ? ++o : --o) {
          results1.push((ref38 = (ref39 = cis[x]) != null ? ref39.mean : void 0) != null ? ref38 : null);
        }
        return results1;
      })(),
      low: (function() {
        var o, ref37, ref38, ref39, results1;
        results1 = [];
        for (x = o = 1, ref37 = gn1.length; 1 <= ref37 ? o <= ref37 : o >= ref37; x = 1 <= ref37 ? ++o : --o) {
          results1.push((ref38 = (ref39 = cis[x]) != null ? ref39.low : void 0) != null ? ref38 : null);
        }
        return results1;
      })(),
      high: (function() {
        var o, ref37, ref38, ref39, results1;
        results1 = [];
        for (x = o = 1, ref37 = gn1.length; 1 <= ref37 ? o <= ref37 : o >= ref37; x = 1 <= ref37 ? ++o : --o) {
          results1.push((ref38 = (ref39 = cis[x]) != null ? ref39.high : void 0) != null ? ref38 : null);
        }
        return results1;
      })(),
      categories: (function() {
        results1 = [];
        for (var o = 1, ref37 = gn1.length; 1 <= ref37 ? o <= ref37 : o >= ref37; 1 <= ref37 ? o++ : o--){ results1.push(o); }
        return results1;
      }).apply(this)
    };
    mycichart = d3panels.cichart({
      height: hright,
      width: wright,
      margin: margin,
      axispos: axispos,
      rectcolor: rectcolor,
      boxcolor: boxcolor,
      boxwidth: boxwidth,
      segcolor: cicolors_expanded,
      segwidth: segwidth,
      segstrokewidth: segstrokewidth,
      vertsegcolor: cicolors_expanded,
      segstrokewidth: linewidth,
      xlab: "",
      ylab: ylab_eff,
      nyticks: nyticks_ci,
      yticks: yticks_ci,
      xcatlabels: gn1,
      title: mar1 + " : " + mar2,
      titlepos: titlepos,
      tipclass: widgetdivid
    });
    if (g_eff[0] == null) {
      g_eff[0] = svg.append("g").attr("id", "eff_0").attr("transform", "translate(" + eff_hpos[0] + ", " + eff_vpos[0] + ")");
    }
    mycichart(g_eff[0], ci_data);
    effcharts = [mydotchart, mycichart];
    results2 = [];
    for (p = q = 0; q <= 1; p = ++q) {
      effcharts[p].svg().append("g").attr("class", "x axis").selectAll("empty").data(gn2).enter().append("text").attr("x", function(d, i) {
        return mydotchart.xscale()(i + 1);
      }).attr("y", hright - margin.bottom / 2 + axispos.xlabel).text(function(d) {
        return d;
      });
      results2.push(effcharts[p].svg().append("g").attr("class", "x axis").selectAll("empty").data([mar1, mar2]).enter().append("text").attr("x", (margin.left + mydotchart.xscale()(1)) / 2.0).attr("y", function(d, i) {
        return hright - margin.bottom / (i + 1) + axispos.xlabel;
      }).style("text-anchor", "end").text(function(d) {
        return d + ":";
      }));
    }
    return results2;
  };
};

add_symmetric_lod = function(scantwo_data) {
  var i, j, k, l, len, m, o, q, ref, ref1, ref2, ref3, ref4, ref5;
  scantwo_data.full = scantwo_data.lod.map(function(d) {
    return d.map(function(dd) {
      return dd;
    });
  });
  scantwo_data.add = scantwo_data.lod.map(function(d) {
    return d.map(function(dd) {
      return dd;
    });
  });
  scantwo_data.fv1 = scantwo_data.lodv1.map(function(d) {
    return d.map(function(dd) {
      return dd;
    });
  });
  scantwo_data.av1 = scantwo_data.lodv1.map(function(d) {
    return d.map(function(dd) {
      return dd;
    });
  });
  scantwo_data.int = scantwo_data.lod.map(function(d) {
    return d.map(function(dd) {
      return dd;
    });
  });
  for (i = k = 0, ref = scantwo_data.lod.length - 1; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
    for (j = l = ref1 = i, ref2 = scantwo_data.lod[i].length; ref1 <= ref2 ? l < ref2 : l > ref2; j = ref1 <= ref2 ? ++l : --l) {
      scantwo_data.full[i][j] = scantwo_data.lod[j][i];
      scantwo_data.add[j][i] = scantwo_data.lod[i][j];
      scantwo_data.fv1[i][j] = scantwo_data.lodv1[j][i];
      scantwo_data.av1[j][i] = scantwo_data.lodv1[i][j];
    }
  }
  scantwo_data.one = [];
  for (i = m = 0, ref3 = scantwo_data.lod.length; 0 <= ref3 ? m < ref3 : m > ref3; i = 0 <= ref3 ? ++m : --m) {
    scantwo_data.one.push(scantwo_data.lod[i]);
    for (j = o = 0, ref4 = scantwo_data.lod.length; 0 <= ref4 ? o < ref4 : o > ref4; j = 0 <= ref4 ? ++o : --o) {
      scantwo_data.int[i][j] = scantwo_data.full[i][j] - scantwo_data.add[i][j];
    }
  }
  scantwo_data.lod = null;
  scantwo_data.lodv1 = null;
  scantwo_data.max = {};
  ref5 = ["full", "add", "fv1", "av1", "int"];
  for (q = 0, len = ref5.length; q < len; q++) {
    i = ref5[q];
    scantwo_data.max[i] = d3panels.matrixMax(scantwo_data[i]);
  }
  return scantwo_data;
};

lod_for_heatmap = function(scantwo_data, left, right) {
  var i, j, k, l, ref, ref1, thelod, z;
  z = scantwo_data.full.map(function(d) {
    return d.map(function(dd) {
      return dd;
    });
  });
  for (i = k = 0, ref = z.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
    for (j = l = 0, ref1 = z.length; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
      thelod = j < i ? right : left;
      z[i][j] = scantwo_data[thelod][i][j] / scantwo_data.max[thelod] * scantwo_data.max["full"];
    }
  }
  return z;
};
